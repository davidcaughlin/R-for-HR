[["descriptives.html", "Chapter 21 Descriptive Statistics 21.1 Determine the Measurement Scale 21.2 Describe Nominal &amp; Ordinal (Categorical) Variables 21.3 Describe Interval &amp; Ratio (Continuous) Variables 21.4 Summary", " Chapter 21 Descriptive Statistics Descriptive statistics are used to describe the characteristics of a sample drawn from a population; often, when dealing with data about human beings in organizations, its not feasible to attain data for the entire population, so instead we settle for what is hopefully a representative sample of individuals from the focal population. Common types of descriptive statistics include counts (i.e., frequencies), measures of central tendency (e.g., mean, median, mode), and measures of dispersion (e.g., variance, standard deviation, interquartile range). When we analyze employee demographic data, for example, we often compute descriptive statistics like the number of employees who identify with each race/ethnicity category or the average employee age and standard deviation. Its important to remember that descriptive statistics are, well, descriptive. That is, they help us summarize characteristics of a sample, which is why they are sometimes referred to as summary statistics. As discussed in the chapter on the Data Analysis phase of the HR Analytics Project Life Cycle, descriptive statistics are a specific type of descriptive analytics, as they summarize data that were collected in the past. 21.0.0.1 Measurement Scales When determining what type of descriptive statistics is appropriate for summarizing data contained within a particular variable, it is important to determine the measurement scale of the variable. Measurement scale (i.e., scale of measurement, level of measurement) refers to the type of information contained within a vector of data (e.g., variable), and the four measurement scales are: nominal, ordinal, interval, and ratio. Nominal measurement scale. Variables with a nominal measurement scale have different category labels, which are sometimes referred to as levels. The category labels, however, do not have any inherent numeric properties. As an example, lets operationalize gender identity as having a nominal measurement scale, such that gender identity includes the following category labels: agender, man, nonbinary, trans man, trans woman, and woman. These category labels do not have any inherent numeric values, and although we could assign numeric values to the gender identity category labels (e.g., agender = 1, man = 2, nonbinary = 3, etc.), doing so wouldnt imply that one category label has a higher value than another. Variables with a nominal measurement scale are sometimes referred to as categorical variables. The Facility and Gender variables (i.e., columns) contain examples of nominal measurement scales, as each variable has category labels that lack any inherent numeric values and cannot be ordered in a meaningful way. Ordinal measurement scale. Like variables with a nominal measurement scale, variables with an ordinal measurement scale are a specific type of categorical variable; however, unlike nominal variables, the category labels (i.e., levels) associated with ordinal variables can be ordered or ranked. It should be noted that the gaps  or intervals  between categorical labels of an ordinal variable are unknown. For example, lets operationalize employee education levels with the following ordered category labels: high school diploma, some college, and college degree. That is, completing some portion of a college degree is a higher level of education than earning a high school diploma, and completing a college degree is a higher level of education than completing some portion of a college degree. We dont know, though, the size of the interval between earning a high school diploma and completing some college, and between some completing some college and earning a college degree; thus, as operationalized in this example, employee education level demonstrates an ordinal measurement scale (as opposed to an interval measurement scale, which is described in the following section). A classic example of an ordinal measurement scale is any type of Likert (or Likert-type) scale or response format. Examples of Likert scales include agreement response formats (e.g., Strongly Disagree, Disagree, Neither Disagree Nor Agree, Agree, Strongly Agree) and frequency response formats (e.g., Never, Rarely, Sometimes, Always). Likert scales are commonly used in employee surveys; for example, survey respondents might be asked to indicate their level of agreement with the following survey item that is designed to assess job satisfaction: In general, I am satisfied with my job. Just like any variable with an ordinal measurement scale, we dont know the intervals between each category label (i.e., response option) from a Likert scale. Nonetheless, in the social sciences, it is relatively common for researchers to treat Likert scales as though they have interval measurement scales for the purposes of data analysis, particularly when composite variables (i.e., overall scale score variables) are created by summing or averaging respondents scores across multiple survey items. The Education and Job Level variables (i.e., columns) contain examples of ordinal measurement scales, as each variable has category labels can be ordered in a meaningful way but where intervals between category labels are unknown or undefined. Interval measurement scale. Variables with an interval measurement scale have a numeric scale, and not only is there an order to the numeric values, equally sized intervals between values have the same meaning or interpretation  hence, the term interval measurement scale; with all that being said, interval variables lack a true or meaningful zero value. Variables with an interval measurement scale are sometimes referred to as continuous variables. As an example, suppose we purchase a cognitive ability (i.e., intelligence) test that we plan to administer to job applicants. Lets now imagine that this test operationalize cognitive ability, such that scores can range from 0 to 200, where 100 indicates the average level of cognitive ability in the population. Further, the test is designed such that every 1-point interval holds the same interpretation, such that, for instance, the 1-point interval between 78 and 79 has the same meaning as the 1-point interval between 110 and 111; in other words, equally sized intervals between values have the same meaning or interpretation in terms of incremental differences in cognitive ability. Even though this cognitive ability test can produce a score of zero, the zero value is not meaningful, as it does not imply the absence of cognitive ability; rather, it just indicates the lowest point on the numeric scale used to assess cognitive ability. The Cognitive Ability and BARS (Behaviorally Anchored Rating Scale) variables (i.e., columns) contain examples of interval measurement scales, as each variable has a numeric scale in which equally sized intervals between values have the same meaning or interpretation; however, both variables lack a meaningful or true zero. Ratio measurement scale. Like variables with an interval measurement scale, variables with a ratio measurement scale are a specific type of continuous variable, as they have a numeric scale in which equally sized intervals between values have the same meaning or interpretation; however, unlike interval variables, ratio variables have a true and meaningful zero value, such that zero indicates the absence of the construct being measured. Common examples of variables with a ratio measurement scale include those that measure (elapsed) time, where time is measured in seconds, minutes, hours, days, months, years, decades, or centuries. Equally sized intervals between various time points have the same meaning, and a time of zero implies the absence of time having passed. In organizational settings, we often measure employee age and tenure as numeric elapsed time since a prior date. Because their is a true zero associated with ratio measurement scales, we can make statements like this individual is twice as old as that individual or this individual has worked here one third as long as that individual. The Age and Monthly Pay variables (i.e., columns) contain examples of ratio measurement scales, as each variable has a numeric scale in which equally sized intervals between values have the same meaning or interpretation; in addition, both variables have a meaningful or true zero, where zero implies the absence of whatever is being measured. 21.0.0.2 Constructs, Measures, &amp; Measurement Scales Importantly, we use measures to assess constructs (i.e., concepts), and often there are different ways in which we can measure or operationalize the same construct. Consequently, different measures might have a different measurement scale, even though they are each designed to assess the same construct. For example, if wish to assess the construct of job performance for sales professionals, we could have supervisors rate employee performance using a three-point scale, ranging from Does Not Meet Expectations to Meets Expectations to Exceeds Expectations, which could be described as an ordinal measurement scale. Alternatively, we might also assess the construct of job performance for sales professionals based on how much revenue they generate (in US dollars), which could be described as a ratio measurement scale. 21.0.0.3 Types of Descriptive Statistics Once we have determined the measurement scale of a variable, were ready to choose an appropriate type of descriptive statistics to summarize the data associated with that variable. Broadly speaking, when describing just a single variable (i.e., applying univariate descriptive statistics), we can distinguish between descriptive statistics that are appropriate for describing categorical versus continuous variables, where categorical variables have a nominal or ordinal measurement scale and continuous variable have an interval or ratio measurement scale. Often, counts (i.e., frequencies) are used to describe data associated with a categorical variable, and measures of central tendency and dispersion are used to describe data associated with a continuous variable. Counts. Counts are useful descriptive statistics when a variable has a nominal or ordinal measurement scale. Counts are also referred to as frequencies, so Ill use those two terms interchangeably. As an added benefit, counts tend to be understood by a broad audience, as they simply refer to counting or tallying how many instances of each discrete instances of a category label (i.e., level) of a nominal or ordinal variable have occurred. In fact, sometimes it can be quite amazing what insights we can gleaned just by counting things. A common example of counts in the HR context is headcount by department, facility, or unit. Imagine if you will an organization with facilities in three locations: Beaverton, Hillsboro, and Portland. After tallying up how many employees work at each location, we might find that 15 work at the Beaverton facility, 5 at the Hillsboro facility, and 10 at the Portland facility. In this example, Beaverton, Hillsboro, and Portland are our category labels for this nominal variable, and the values 15, 5, and 10, respectively, are the counts associated with each of those category labels. Measures of central tendency &amp; dispersion. Measures of central tendency (e.g., mean, median, mode) summarize the center or most common scores from a distribution, whereas measures of dispersion (e.g., variance, standard deviation, range, interquartile range) summarize variation in scores. Typically, one would apply these specific types of descriptive statistics to describe or summarize variables that have an interval or ratio measurement scale. For example, we might compute the median pay (in US dollars) and the interquartile range in pay for a sample of workers, where pay in this example has a ratio measurement scale. In some instances, however a variable that can be most accurately described as having an ordinal measurement scale might be reclassified as having an interval measurement scale so that measures of central tendency and dispersion can be computed. For example, a variable with five Likert responses options ranging from Strongly Disagree to Strongly Agree would technically have an ordinal measurement scale because there are unknown intervals between each of the levels (i.e., category labels); in other words, the interval distance between Strongly Disagree and Disagree might not be equal to the interval distance between Disagree and Neither Disagree Nor Agree. Yet, in order to perform certain analyses, sometimes such variables are reconceptualized as having equal intervals and thus having an interval measurement scale. To do so, we would typically assign numeric values to each of the Likert response options, such as 1 = Strongly Disagree and 5 = Strongly Agree  which gives the illusion of equal intervals. Perhaps a more compelling case for treating a variable with Likert responses as a having an interval measurement scale is when we create a composite variable (i.e., overall scale score) based on the sum or average of scores from multiple Likert variables (e.g., multiple survey items from a measure). 21.0.0.4 Video Tutorials As usual, you have the choice to follow along with the written tutorial in this chapter or to watch the following video tutorials below. Note that in the videos below, I show how to read in the data using the read.csv function from base R, whereas in the tutorial portion of this chapter, I show how to read in the data using the read_csv function from the readr package. Link to Video Tutorial: https://youtu.be/Xg0wiBofjCU Link to Video Tutorial: https://youtu.be/10jYstRPDAU 21.0.0.5 Functions &amp; Packages Introduced Function Package table base R levels base R factor base R c base R barplot base R pie base R colors base R abline base R hist base R boxplot base R c base R mean base R median base R var base R sd base R min base R max base R range base R IQR base R quantile base R summary base R 21.0.0.6 Initial Steps If you havent already, save the file called employee_demo.csv into a folder that you will subsequently set as your working directory. Your working directory will likely be different than the one shown below (i.e., \"H:/RWorkshop\"). As a reminder, you can access all of the data files referenced in this book by downloading them as a compressed (zipped) folder from the my GitHub site: https://github.com/davidcaughlin/R-Tutorial-Data-Files; once youve followed the link to GitHub, just click Code (or Download) followed by Download ZIP, which will download all of the data files referenced in this book. For the sake of parsimony, I recommend downloading all of the data files into the same folder on your computer, which will allow you to set that same folder as your working directory for each of the chapters in this book. Next, using the setwd function, set your working directory to the folder in which you saved the data file for this chapter. Alternatively, you can manually set your working directory folder in your drop-down menus by going to Session &gt; Set Working Directory &gt; Choose Directory. Be sure to create a new R script file (.R) or update an existing R script file so that you can save your script and annotations. If you need refreshers on how to set your working directory and how to create and save an R script, please refer to Setting a Working Directory and Creating &amp; Saving an R Script. # Set your working directory setwd(&quot;H:/RWorkshop&quot;) Next, read in the .csv data file called employee_demo.csv using your choice of read function. In this example, I use the read_csv function from the readr package (Wickham and Hester 2020). If you choose to use the read_csv function, be sure that you have installed and accessed the readr package using the install.packages and library functions. Note: You dont need to install a package every time you wish to access it; in general, I would recommend updating a package installation once ever 1-3 months. For refreshers on installing packages and reading data into R, please refer to Packages and Reading Data into R. # Install readr package if you haven&#39;t already # [Note: You don&#39;t need to install a package every # time you wish to access it] install.packages(&quot;readr&quot;) # Access readr package library(readr) # Read data and name data frame (tibble) object demo &lt;- read_csv(&quot;employee_demo.csv&quot;) ## ## -- Column specification ----------------------------------------------------------------------------------- ## cols( ## EmpID = col_character(), ## Facility = col_character(), ## Education = col_character(), ## Performance = col_double(), ## Age = col_double() ## ) # Print the names of the variables in the data frame (tibble) object names(demo) ## [1] &quot;EmpID&quot; &quot;Facility&quot; &quot;Education&quot; &quot;Performance&quot; &quot;Age&quot; # Print number of rows in data frame (tibble) object nrow(demo) ## [1] 30 # Print data frame (tibble) object print(demo) ## # A tibble: 30 x 5 ## EmpID Facility Education Performance Age ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 EE123 Beaverton College Degree 3.8 25 ## 2 EE124 Beaverton Some College 9 30 ## 3 EE125 Portland High School Diploma 8.3 32 ## 4 EE126 Beaverton Some College 9.8 28 ## 5 EE127 Beaverton Some College 5.7 30 ## 6 EE128 Beaverton College Degree 8.2 30 ## 7 EE129 Beaverton College Degree 7.3 28 ## 8 EE130 Beaverton College Degree 7.7 28 ## 9 EE131 Portland Some College 6.3 28 ## 10 EE132 Hillsboro Some College 8.4 27 ## # ... with 20 more rows The demo data frame object contains five variables. EmpID, Facility, Education, Performance, and Age. The EmpID variable is the employee unique identifier, and in this data frame, each row corresponds to a unique employee. The Facility variable contains the name of the facility where each employee works. The Education variable includes the highest level of education each employee attained (i.e., High School Diploma, Some College, College Degree). The Performance variable includes the employees annual performance scores (as derived by a proprietary algorithm), where a score of 0.0 would indicate exceptionally low job performance and a score of 10 would indicate exceptionally high job performance. The Age variable includes employees age (in years). 21.1 Determine the Measurement Scale As described above, we have four employee-demographic variables at our disposal in the data frame object we named demo: Facility, Education, Performance, and Age. Now its time to determine which measurement scale best describes each variable  and spoiler alert: These four variables correspond to nominal, ordinal, interval, and ratio measurement scales respectively. Below, I describe why a particular measurement scale maps onto each variable. By viewing our the data frame object called demo using the print, head, or View functions (as show above in the Initial Steps), we can see that the Facility variable consists of the following categories (i.e., levels): Beaverton, Hillsboro, and Portland. These categories do not have inherent numeric properties, and they cant be ordered meaningfully given that they just represent different facility locations for this fictitious organization. Given all that, the Facility variable can best be described as having a nominal measurement scale. The Education variable contains three levels (i.e., categories): High School Diploma, Some College, and College Degree. These three discrete categories do not have inherent numeric properties but can be ordered in terms of a conventional educational progression, where earning a high school diploma would be the lowest level and earning a college degree would be the highest level (of the three). Furthermore, although the three variable levels can be ordered, they do not necessarily have equal intervals between the levels; in other words, the distance (e.g., time) between a high school diploma and completing some college is not necessarily the same as the distance between completing some college and a college degree. Given all of those characteristics, the Education variable in these data can best be described as having an ordinal measurement scale. The Performance variable includes the annual performance score for each employee (as derived from a proprietary algorithm), where a score of 0.0 would indicate exceptionally low job performance and a score of 10 would indicate exceptionally high job performance. We can assume in this case that intervals between integers are equal, such that the distance between scores of 1 and 2 is the same as the distance between scores 2 and 3; however, because a value of zero (0.0) does not indicate the absence of performance for this variable (but rather exceptionally low job performance), we must conclude that it has an interval measurement scale as opposed to a ratio measurement scale. Finally, the Age variable includes the age of each employee measured in years. Because Age has ordered numeric values and because there are equal intervals between years as a standard measure of time, we can conclude that the variable does not have a nominal or ordinal measurement scale. Whats more, hypothetically, a value of zero when measuring something in years would imply the absence of years  which is to say Age as measured in years has a meaningful zero value. Given all that, the Age variable can be most accurately described as having a ratio measurement scale. 21.2 Describe Nominal &amp; Ordinal (Categorical) Variables We can describe variables with nominal or ordinal measurement scales by computing counts (i.e., frequencies) and by creating univariate bar charts (or pie charts), and well work through each of these descriptive approaches in the following sections. 21.2.1 Compute Counts &amp; Frequencies Fortunately, its quite easy to run counts in R, and well begin by running counts for the Facility variable. One of the simplest approaches is to use the table function from base R. As the sole parenthetical argument, just type the name of the data frame object (demo) followed by the $ operator and the name of the variable that belongs to that data frame object (Facility). # Compute counts for Facility variable (which has nominal measurement scale) table(demo$Facility) ## ## Beaverton Hillsboro Portland ## 15 5 10 As we can see, 15 employees work at the Beaverton facility, 5 at the Hillsboro facility, and 10 at the Portland facility. Simply put, the most employees work in Beaverton, followed by Portland and Hillsboro. Of course, we also would hope that these data are accurate and timely, and point-in-time headcount data in organizations can be surprisingly difficult to estimate accurately in some organizations, but thats a story for another time. Because we have classified the Education variable as ordinal, we want to make sure that it has ordered levels. That is, High School Diploma should be the lowest level and College Degree should be the highest. To check to see if the variable is a factor with ordered levels, we can apply the levels function from base R and, as the sole parenthetical argument, type the name of the data frame object (demo) followed by the $ operator and the name of the variable that belongs to that data frame object (Education). # Determine whether the Education variable is a factor with ordered levels levels(demo$Education) ## NULL Running the levels function for the Education variable returns NULL, which indicates that this variable is not a factor variable with ordered levels. Never fear, we can fix that by using the factor function from base R. To convert the Education variable to an ordered factor variable, we will overwrite the existing Education variable from the demo data frame object. Thus, we will start by typing the name of the data frame object (demo) followed by the $ operator and the name of the variable (Education), and to the right, we will type the &lt;- operator so that we can perform the variable assignment. To the right of the &lt;- operator, we will type the name of the factor function. As the first argument, we will type the name of the data frame object (demo) followed by the $ operator and the name of the variable (Education). As the second argument, we will type ordered=TRUE to signify that this variable will have ordered levels. As the third argument, well type levels= followed by a vector of the variable levels in ascending order. Note that we use the c (combine) function from base R to construct the vector, and we need to put each level within quotation marks (\" \"). # Convert Education variable to ordered factor demo$Education &lt;- factor(demo$Education, ordered=TRUE, levels=c(&quot;High School Diploma&quot;, &quot;Some College&quot;, &quot;College Degree&quot;)) Now that weve converted the Education variable to an ordered factor variable, lets verify that we did so correctly by running the same levels function that we did above. # Determine whether the Education variable is a factor with ordered levels levels(demo$Education) ## [1] &quot;High School Diploma&quot; &quot;Some College&quot; &quot;College Degree&quot; Instead of NULL, now we see the levels of the variable in ascending order. Good for us! With the Education variable now an ordered factor, it now makes sense to run the table function to compute the counts. # Compute counts for Education variable table(demo$Education) ## ## High School Diploma Some College College Degree ## 4 15 11 Descriptively, we see that the most people completed some college (15), followed closely by 11 people who completed a full college degree. Relatively few employees in this sample had just a high school diploma (4). 21.2.2 Create Data Visualizations When interpreting descriptive statistics, its often useful to create some kind of data visualization to display the findings in a pictorial or graphical format. A bar chart is a simple data visualization that many potential audience members will be familiar with, making it a good choice. In addition, when the different categories (e.g., levels) are mutually exclusive and sum to a whole, we might also choose to create a pie chart. Well begin by creating a bar chart for the Facility variable and follow that up with creating a pie chart for the Education variable  though, we just as easily could make a bar chart for the Education variable and a pie chart for the Facility variable. 21.2.2.1 Create Bar Charts Using the barplot function from base R, we can create a very simple and straightforward bar chart without too many frills and embellishments. Lets start with the Facility variable. As the sole parenthetical argument in the barplot function, simply, enter the table(demo$Facility) code that we wrote in the previous section. # Create a bar chart based on Facility counts barplot(table(demo$Facility)) As you can see, a very simple (and not super aesthetically pleasing) bar chart appears in our Plots window. When exploring data on our own, it is often fine to just complete a simple bar chart like this one, as opposed to fine-tuning the aesthetics (e.g., size, color, font) of the plot. If you want, you can export this plot as a PDF or PNG image file, or you can copy it and paste it in another document. To do so, just click on the Export button in the Plots window, which should appear in the lower right of your RStudio interface. If youre feeling adventurous and would like to learn how to fine-tune the bar chart, feel free to continue on with this tutorial. Additional attention paid to aesthetics might be worthwhile if you plan to present the plot to others in a formal presentation or report. Using the barplot code we wrote above, we can add a second argument in which we apply ylim= followed by a vector (using the c function) of the lower and upper limits for the y-axis. In this example, I set the lower and upper y-axis limits to 0 and 20. # Create a bar chart based on Facility counts barplot(table(demo$Facility), ylim=c(0,20)) Building on the previous code, we add additional arguments in which we provide more meaningful labels for the x- and y-axes. To do so, we use the xlab argument for the x-axis label and the ylab argument for the y-axis label. Just make sure to put quotation marks (\" \") around whatever text you come up with for your axis labels. # Create a bar chart based on Facility counts barplot(table(demo$Facility), ylim=c(0,20), xlab=&quot;Facility&quot;, ylab=&quot;Counts&quot;) We can change the colors of the bars by adding the col (color) argument. There are many, many different colors that can be used in R, and one of my favorites is dodgerblue. # Create a bar chart based on Facility counts barplot(table(demo$Facility), ylim=c(0,20), xlab=&quot;Facility&quot;, ylab=&quot;Counts&quot;, col=&quot;dodgerblue&quot;) If youd like to explore additional colors, check out this website: https://www.r-graph-gallery.com/colors.html. Or, you can run the colors() function (without any arguments), and youll get a (huge) list of the color options. # List names of base R color choices colors() ## [1] &quot;white&quot; &quot;aliceblue&quot; &quot;antiquewhite&quot; &quot;antiquewhite1&quot; ## [5] &quot;antiquewhite2&quot; &quot;antiquewhite3&quot; &quot;antiquewhite4&quot; &quot;aquamarine&quot; ## [9] &quot;aquamarine1&quot; &quot;aquamarine2&quot; &quot;aquamarine3&quot; &quot;aquamarine4&quot; ## [13] &quot;azure&quot; &quot;azure1&quot; &quot;azure2&quot; &quot;azure3&quot; ## [17] &quot;azure4&quot; &quot;beige&quot; &quot;bisque&quot; &quot;bisque1&quot; ## [21] &quot;bisque2&quot; &quot;bisque3&quot; &quot;bisque4&quot; &quot;black&quot; ## [25] &quot;blanchedalmond&quot; &quot;blue&quot; &quot;blue1&quot; &quot;blue2&quot; ## [29] &quot;blue3&quot; &quot;blue4&quot; &quot;blueviolet&quot; &quot;brown&quot; ## [33] &quot;brown1&quot; &quot;brown2&quot; &quot;brown3&quot; &quot;brown4&quot; ## [37] &quot;burlywood&quot; &quot;burlywood1&quot; &quot;burlywood2&quot; &quot;burlywood3&quot; ## [41] &quot;burlywood4&quot; &quot;cadetblue&quot; &quot;cadetblue1&quot; &quot;cadetblue2&quot; ## [45] &quot;cadetblue3&quot; &quot;cadetblue4&quot; &quot;chartreuse&quot; &quot;chartreuse1&quot; ## [49] &quot;chartreuse2&quot; &quot;chartreuse3&quot; &quot;chartreuse4&quot; &quot;chocolate&quot; ## [53] &quot;chocolate1&quot; &quot;chocolate2&quot; &quot;chocolate3&quot; &quot;chocolate4&quot; ## [57] &quot;coral&quot; &quot;coral1&quot; &quot;coral2&quot; &quot;coral3&quot; ## [61] &quot;coral4&quot; &quot;cornflowerblue&quot; &quot;cornsilk&quot; &quot;cornsilk1&quot; ## [65] &quot;cornsilk2&quot; &quot;cornsilk3&quot; &quot;cornsilk4&quot; &quot;cyan&quot; ## [69] &quot;cyan1&quot; &quot;cyan2&quot; &quot;cyan3&quot; &quot;cyan4&quot; ## [73] &quot;darkblue&quot; &quot;darkcyan&quot; &quot;darkgoldenrod&quot; &quot;darkgoldenrod1&quot; ## [77] &quot;darkgoldenrod2&quot; &quot;darkgoldenrod3&quot; &quot;darkgoldenrod4&quot; &quot;darkgray&quot; ## [81] &quot;darkgreen&quot; &quot;darkgrey&quot; &quot;darkkhaki&quot; &quot;darkmagenta&quot; ## [85] &quot;darkolivegreen&quot; &quot;darkolivegreen1&quot; &quot;darkolivegreen2&quot; &quot;darkolivegreen3&quot; ## [89] &quot;darkolivegreen4&quot; &quot;darkorange&quot; &quot;darkorange1&quot; &quot;darkorange2&quot; ## [93] &quot;darkorange3&quot; &quot;darkorange4&quot; &quot;darkorchid&quot; &quot;darkorchid1&quot; ## [97] &quot;darkorchid2&quot; &quot;darkorchid3&quot; &quot;darkorchid4&quot; &quot;darkred&quot; ## [101] &quot;darksalmon&quot; &quot;darkseagreen&quot; &quot;darkseagreen1&quot; &quot;darkseagreen2&quot; ## [105] &quot;darkseagreen3&quot; &quot;darkseagreen4&quot; &quot;darkslateblue&quot; &quot;darkslategray&quot; ## [109] &quot;darkslategray1&quot; &quot;darkslategray2&quot; &quot;darkslategray3&quot; &quot;darkslategray4&quot; ## [113] &quot;darkslategrey&quot; &quot;darkturquoise&quot; &quot;darkviolet&quot; &quot;deeppink&quot; ## [117] &quot;deeppink1&quot; &quot;deeppink2&quot; &quot;deeppink3&quot; &quot;deeppink4&quot; ## [121] &quot;deepskyblue&quot; &quot;deepskyblue1&quot; &quot;deepskyblue2&quot; &quot;deepskyblue3&quot; ## [125] &quot;deepskyblue4&quot; &quot;dimgray&quot; &quot;dimgrey&quot; &quot;dodgerblue&quot; ## [129] &quot;dodgerblue1&quot; &quot;dodgerblue2&quot; &quot;dodgerblue3&quot; &quot;dodgerblue4&quot; ## [133] &quot;firebrick&quot; &quot;firebrick1&quot; &quot;firebrick2&quot; &quot;firebrick3&quot; ## [137] &quot;firebrick4&quot; &quot;floralwhite&quot; &quot;forestgreen&quot; &quot;gainsboro&quot; ## [141] &quot;ghostwhite&quot; &quot;gold&quot; &quot;gold1&quot; &quot;gold2&quot; ## [145] &quot;gold3&quot; &quot;gold4&quot; &quot;goldenrod&quot; &quot;goldenrod1&quot; ## [149] &quot;goldenrod2&quot; &quot;goldenrod3&quot; &quot;goldenrod4&quot; &quot;gray&quot; ## [153] &quot;gray0&quot; &quot;gray1&quot; &quot;gray2&quot; &quot;gray3&quot; ## [157] &quot;gray4&quot; &quot;gray5&quot; &quot;gray6&quot; &quot;gray7&quot; ## [161] &quot;gray8&quot; &quot;gray9&quot; &quot;gray10&quot; &quot;gray11&quot; ## [165] &quot;gray12&quot; &quot;gray13&quot; &quot;gray14&quot; &quot;gray15&quot; ## [169] &quot;gray16&quot; &quot;gray17&quot; &quot;gray18&quot; &quot;gray19&quot; ## [173] &quot;gray20&quot; &quot;gray21&quot; &quot;gray22&quot; &quot;gray23&quot; ## [177] &quot;gray24&quot; &quot;gray25&quot; &quot;gray26&quot; &quot;gray27&quot; ## [181] &quot;gray28&quot; &quot;gray29&quot; &quot;gray30&quot; &quot;gray31&quot; ## [185] &quot;gray32&quot; &quot;gray33&quot; &quot;gray34&quot; &quot;gray35&quot; ## [189] &quot;gray36&quot; &quot;gray37&quot; &quot;gray38&quot; &quot;gray39&quot; ## [193] &quot;gray40&quot; &quot;gray41&quot; &quot;gray42&quot; &quot;gray43&quot; ## [197] &quot;gray44&quot; &quot;gray45&quot; &quot;gray46&quot; &quot;gray47&quot; ## [201] &quot;gray48&quot; &quot;gray49&quot; &quot;gray50&quot; &quot;gray51&quot; ## [205] &quot;gray52&quot; &quot;gray53&quot; &quot;gray54&quot; &quot;gray55&quot; ## [209] &quot;gray56&quot; &quot;gray57&quot; &quot;gray58&quot; &quot;gray59&quot; ## [213] &quot;gray60&quot; &quot;gray61&quot; &quot;gray62&quot; &quot;gray63&quot; ## [217] &quot;gray64&quot; &quot;gray65&quot; &quot;gray66&quot; &quot;gray67&quot; ## [221] &quot;gray68&quot; &quot;gray69&quot; &quot;gray70&quot; &quot;gray71&quot; ## [225] &quot;gray72&quot; &quot;gray73&quot; &quot;gray74&quot; &quot;gray75&quot; ## [229] &quot;gray76&quot; &quot;gray77&quot; &quot;gray78&quot; &quot;gray79&quot; ## [233] &quot;gray80&quot; &quot;gray81&quot; &quot;gray82&quot; &quot;gray83&quot; ## [237] &quot;gray84&quot; &quot;gray85&quot; &quot;gray86&quot; &quot;gray87&quot; ## [241] &quot;gray88&quot; &quot;gray89&quot; &quot;gray90&quot; &quot;gray91&quot; ## [245] &quot;gray92&quot; &quot;gray93&quot; &quot;gray94&quot; &quot;gray95&quot; ## [249] &quot;gray96&quot; &quot;gray97&quot; &quot;gray98&quot; &quot;gray99&quot; ## [253] &quot;gray100&quot; &quot;green&quot; &quot;green1&quot; &quot;green2&quot; ## [257] &quot;green3&quot; &quot;green4&quot; &quot;greenyellow&quot; &quot;grey&quot; ## [261] &quot;grey0&quot; &quot;grey1&quot; &quot;grey2&quot; &quot;grey3&quot; ## [265] &quot;grey4&quot; &quot;grey5&quot; &quot;grey6&quot; &quot;grey7&quot; ## [269] &quot;grey8&quot; &quot;grey9&quot; &quot;grey10&quot; &quot;grey11&quot; ## [273] &quot;grey12&quot; &quot;grey13&quot; &quot;grey14&quot; &quot;grey15&quot; ## [277] &quot;grey16&quot; &quot;grey17&quot; &quot;grey18&quot; &quot;grey19&quot; ## [281] &quot;grey20&quot; &quot;grey21&quot; &quot;grey22&quot; &quot;grey23&quot; ## [285] &quot;grey24&quot; &quot;grey25&quot; &quot;grey26&quot; &quot;grey27&quot; ## [289] &quot;grey28&quot; &quot;grey29&quot; &quot;grey30&quot; &quot;grey31&quot; ## [293] &quot;grey32&quot; &quot;grey33&quot; &quot;grey34&quot; &quot;grey35&quot; ## [297] &quot;grey36&quot; &quot;grey37&quot; &quot;grey38&quot; &quot;grey39&quot; ## [301] &quot;grey40&quot; &quot;grey41&quot; &quot;grey42&quot; &quot;grey43&quot; ## [305] &quot;grey44&quot; &quot;grey45&quot; &quot;grey46&quot; &quot;grey47&quot; ## [309] &quot;grey48&quot; &quot;grey49&quot; &quot;grey50&quot; &quot;grey51&quot; ## [313] &quot;grey52&quot; &quot;grey53&quot; &quot;grey54&quot; &quot;grey55&quot; ## [317] &quot;grey56&quot; &quot;grey57&quot; &quot;grey58&quot; &quot;grey59&quot; ## [321] &quot;grey60&quot; &quot;grey61&quot; &quot;grey62&quot; &quot;grey63&quot; ## [325] &quot;grey64&quot; &quot;grey65&quot; &quot;grey66&quot; &quot;grey67&quot; ## [329] &quot;grey68&quot; &quot;grey69&quot; &quot;grey70&quot; &quot;grey71&quot; ## [333] &quot;grey72&quot; &quot;grey73&quot; &quot;grey74&quot; &quot;grey75&quot; ## [337] &quot;grey76&quot; &quot;grey77&quot; &quot;grey78&quot; &quot;grey79&quot; ## [341] &quot;grey80&quot; &quot;grey81&quot; &quot;grey82&quot; &quot;grey83&quot; ## [345] &quot;grey84&quot; &quot;grey85&quot; &quot;grey86&quot; &quot;grey87&quot; ## [349] &quot;grey88&quot; &quot;grey89&quot; &quot;grey90&quot; &quot;grey91&quot; ## [353] &quot;grey92&quot; &quot;grey93&quot; &quot;grey94&quot; &quot;grey95&quot; ## [357] &quot;grey96&quot; &quot;grey97&quot; &quot;grey98&quot; &quot;grey99&quot; ## [361] &quot;grey100&quot; &quot;honeydew&quot; &quot;honeydew1&quot; &quot;honeydew2&quot; ## [365] &quot;honeydew3&quot; &quot;honeydew4&quot; &quot;hotpink&quot; &quot;hotpink1&quot; ## [369] &quot;hotpink2&quot; &quot;hotpink3&quot; &quot;hotpink4&quot; &quot;indianred&quot; ## [373] &quot;indianred1&quot; &quot;indianred2&quot; &quot;indianred3&quot; &quot;indianred4&quot; ## [377] &quot;ivory&quot; &quot;ivory1&quot; &quot;ivory2&quot; &quot;ivory3&quot; ## [381] &quot;ivory4&quot; &quot;khaki&quot; &quot;khaki1&quot; &quot;khaki2&quot; ## [385] &quot;khaki3&quot; &quot;khaki4&quot; &quot;lavender&quot; &quot;lavenderblush&quot; ## [389] &quot;lavenderblush1&quot; &quot;lavenderblush2&quot; &quot;lavenderblush3&quot; &quot;lavenderblush4&quot; ## [393] &quot;lawngreen&quot; &quot;lemonchiffon&quot; &quot;lemonchiffon1&quot; &quot;lemonchiffon2&quot; ## [397] &quot;lemonchiffon3&quot; &quot;lemonchiffon4&quot; &quot;lightblue&quot; &quot;lightblue1&quot; ## [401] &quot;lightblue2&quot; &quot;lightblue3&quot; &quot;lightblue4&quot; &quot;lightcoral&quot; ## [405] &quot;lightcyan&quot; &quot;lightcyan1&quot; &quot;lightcyan2&quot; &quot;lightcyan3&quot; ## [409] &quot;lightcyan4&quot; &quot;lightgoldenrod&quot; &quot;lightgoldenrod1&quot; &quot;lightgoldenrod2&quot; ## [413] &quot;lightgoldenrod3&quot; &quot;lightgoldenrod4&quot; &quot;lightgoldenrodyellow&quot; &quot;lightgray&quot; ## [417] &quot;lightgreen&quot; &quot;lightgrey&quot; &quot;lightpink&quot; &quot;lightpink1&quot; ## [421] &quot;lightpink2&quot; &quot;lightpink3&quot; &quot;lightpink4&quot; &quot;lightsalmon&quot; ## [425] &quot;lightsalmon1&quot; &quot;lightsalmon2&quot; &quot;lightsalmon3&quot; &quot;lightsalmon4&quot; ## [429] &quot;lightseagreen&quot; &quot;lightskyblue&quot; &quot;lightskyblue1&quot; &quot;lightskyblue2&quot; ## [433] &quot;lightskyblue3&quot; &quot;lightskyblue4&quot; &quot;lightslateblue&quot; &quot;lightslategray&quot; ## [437] &quot;lightslategrey&quot; &quot;lightsteelblue&quot; &quot;lightsteelblue1&quot; &quot;lightsteelblue2&quot; ## [441] &quot;lightsteelblue3&quot; &quot;lightsteelblue4&quot; &quot;lightyellow&quot; &quot;lightyellow1&quot; ## [445] &quot;lightyellow2&quot; &quot;lightyellow3&quot; &quot;lightyellow4&quot; &quot;limegreen&quot; ## [449] &quot;linen&quot; &quot;magenta&quot; &quot;magenta1&quot; &quot;magenta2&quot; ## [453] &quot;magenta3&quot; &quot;magenta4&quot; &quot;maroon&quot; &quot;maroon1&quot; ## [457] &quot;maroon2&quot; &quot;maroon3&quot; &quot;maroon4&quot; &quot;mediumaquamarine&quot; ## [461] &quot;mediumblue&quot; &quot;mediumorchid&quot; &quot;mediumorchid1&quot; &quot;mediumorchid2&quot; ## [465] &quot;mediumorchid3&quot; &quot;mediumorchid4&quot; &quot;mediumpurple&quot; &quot;mediumpurple1&quot; ## [469] &quot;mediumpurple2&quot; &quot;mediumpurple3&quot; &quot;mediumpurple4&quot; &quot;mediumseagreen&quot; ## [473] &quot;mediumslateblue&quot; &quot;mediumspringgreen&quot; &quot;mediumturquoise&quot; &quot;mediumvioletred&quot; ## [477] &quot;midnightblue&quot; &quot;mintcream&quot; &quot;mistyrose&quot; &quot;mistyrose1&quot; ## [481] &quot;mistyrose2&quot; &quot;mistyrose3&quot; &quot;mistyrose4&quot; &quot;moccasin&quot; ## [485] &quot;navajowhite&quot; &quot;navajowhite1&quot; &quot;navajowhite2&quot; &quot;navajowhite3&quot; ## [489] &quot;navajowhite4&quot; &quot;navy&quot; &quot;navyblue&quot; &quot;oldlace&quot; ## [493] &quot;olivedrab&quot; &quot;olivedrab1&quot; &quot;olivedrab2&quot; &quot;olivedrab3&quot; ## [497] &quot;olivedrab4&quot; &quot;orange&quot; &quot;orange1&quot; &quot;orange2&quot; ## [501] &quot;orange3&quot; &quot;orange4&quot; &quot;orangered&quot; &quot;orangered1&quot; ## [505] &quot;orangered2&quot; &quot;orangered3&quot; &quot;orangered4&quot; &quot;orchid&quot; ## [509] &quot;orchid1&quot; &quot;orchid2&quot; &quot;orchid3&quot; &quot;orchid4&quot; ## [513] &quot;palegoldenrod&quot; &quot;palegreen&quot; &quot;palegreen1&quot; &quot;palegreen2&quot; ## [517] &quot;palegreen3&quot; &quot;palegreen4&quot; &quot;paleturquoise&quot; &quot;paleturquoise1&quot; ## [521] &quot;paleturquoise2&quot; &quot;paleturquoise3&quot; &quot;paleturquoise4&quot; &quot;palevioletred&quot; ## [525] &quot;palevioletred1&quot; &quot;palevioletred2&quot; &quot;palevioletred3&quot; &quot;palevioletred4&quot; ## [529] &quot;papayawhip&quot; &quot;peachpuff&quot; &quot;peachpuff1&quot; &quot;peachpuff2&quot; ## [533] &quot;peachpuff3&quot; &quot;peachpuff4&quot; &quot;peru&quot; &quot;pink&quot; ## [537] &quot;pink1&quot; &quot;pink2&quot; &quot;pink3&quot; &quot;pink4&quot; ## [541] &quot;plum&quot; &quot;plum1&quot; &quot;plum2&quot; &quot;plum3&quot; ## [545] &quot;plum4&quot; &quot;powderblue&quot; &quot;purple&quot; &quot;purple1&quot; ## [549] &quot;purple2&quot; &quot;purple3&quot; &quot;purple4&quot; &quot;red&quot; ## [553] &quot;red1&quot; &quot;red2&quot; &quot;red3&quot; &quot;red4&quot; ## [557] &quot;rosybrown&quot; &quot;rosybrown1&quot; &quot;rosybrown2&quot; &quot;rosybrown3&quot; ## [561] &quot;rosybrown4&quot; &quot;royalblue&quot; &quot;royalblue1&quot; &quot;royalblue2&quot; ## [565] &quot;royalblue3&quot; &quot;royalblue4&quot; &quot;saddlebrown&quot; &quot;salmon&quot; ## [569] &quot;salmon1&quot; &quot;salmon2&quot; &quot;salmon3&quot; &quot;salmon4&quot; ## [573] &quot;sandybrown&quot; &quot;seagreen&quot; &quot;seagreen1&quot; &quot;seagreen2&quot; ## [577] &quot;seagreen3&quot; &quot;seagreen4&quot; &quot;seashell&quot; &quot;seashell1&quot; ## [581] &quot;seashell2&quot; &quot;seashell3&quot; &quot;seashell4&quot; &quot;sienna&quot; ## [585] &quot;sienna1&quot; &quot;sienna2&quot; &quot;sienna3&quot; &quot;sienna4&quot; ## [589] &quot;skyblue&quot; &quot;skyblue1&quot; &quot;skyblue2&quot; &quot;skyblue3&quot; ## [593] &quot;skyblue4&quot; &quot;slateblue&quot; &quot;slateblue1&quot; &quot;slateblue2&quot; ## [597] &quot;slateblue3&quot; &quot;slateblue4&quot; &quot;slategray&quot; &quot;slategray1&quot; ## [601] &quot;slategray2&quot; &quot;slategray3&quot; &quot;slategray4&quot; &quot;slategrey&quot; ## [605] &quot;snow&quot; &quot;snow1&quot; &quot;snow2&quot; &quot;snow3&quot; ## [609] &quot;snow4&quot; &quot;springgreen&quot; &quot;springgreen1&quot; &quot;springgreen2&quot; ## [613] &quot;springgreen3&quot; &quot;springgreen4&quot; &quot;steelblue&quot; &quot;steelblue1&quot; ## [617] &quot;steelblue2&quot; &quot;steelblue3&quot; &quot;steelblue4&quot; &quot;tan&quot; ## [621] &quot;tan1&quot; &quot;tan2&quot; &quot;tan3&quot; &quot;tan4&quot; ## [625] &quot;thistle&quot; &quot;thistle1&quot; &quot;thistle2&quot; &quot;thistle3&quot; ## [629] &quot;thistle4&quot; &quot;tomato&quot; &quot;tomato1&quot; &quot;tomato2&quot; ## [633] &quot;tomato3&quot; &quot;tomato4&quot; &quot;turquoise&quot; &quot;turquoise1&quot; ## [637] &quot;turquoise2&quot; &quot;turquoise3&quot; &quot;turquoise4&quot; &quot;violet&quot; ## [641] &quot;violetred&quot; &quot;violetred1&quot; &quot;violetred2&quot; &quot;violetred3&quot; ## [645] &quot;violetred4&quot; &quot;wheat&quot; &quot;wheat1&quot; &quot;wheat2&quot; ## [649] &quot;wheat3&quot; &quot;wheat4&quot; &quot;whitesmoke&quot; &quot;yellow&quot; ## [653] &quot;yellow1&quot; &quot;yellow2&quot; &quot;yellow3&quot; &quot;yellow4&quot; ## [657] &quot;yellowgreen&quot; Finally, the barplot function does not provide a horizontal line where the y-axis is equal to 0. If youd like to add such a line, simply follow up your barplot function with the abline function, and as the sole argument, type h=0. # Create a bar chart based on Facility counts barplot(table(demo$Facility), ylim=c(0,20), xlab=&quot;Facility&quot;, ylab=&quot;Counts&quot;, col=&quot;dodgerblue&quot;) abline(h=0) And finally, heres a quick example of how you might visualize the Education variable using the barplot function. # Create a bar chart for Education variable barplot(table(demo$Education), ylim=c(0,20), xlab=&quot;Education Level&quot;, ylab=&quot;Counts&quot;, col=&quot;orange&quot;) abline(h=0) 21.2.2.2 Create Pie Charts Using the pie function from base R, we can create a very simple and straightforward bar chart without too many frills and embellishments. Lets start with the Education variable. As the sole parenthetical argument in the barplot function, simply, enter the table(demo$Education) code that we wrote in the section called Compute Counts &amp; Frequencies. # Create a bar chart based on Education counts pie(table(demo$Education)) A very simple and generic pie chart appears in our Plots window. When exploring data on our own, it is often fine to just complete a simple pie chart like this one, as opposed to fine-tuning the aesthetics (e.g., size, color, font) of the plot. If you want, you can export this plot as a PDF or PNG image file, or you can copy it and paste it in another document. To do so, just click on the Export button in the Plots window, which should appear in the lower right of your RStudio interface. If youre feeling adventurous and would like to learn how to adjust the colors pie chart, feel free to continue on with this tutorial. Using the pie code we wrote above, lets add the col= argument followed by the c (combine) function containing a vector of colors  one color for each slice of the pie. Here, I chose the primar colors of red, yellow, and blue. # Create a bar chart based on Education counts pie(table(demo$Education), col=c(&quot;red&quot;, &quot;yellow&quot;, &quot;blue&quot;)) If youd like to explore additional colors, check out this website: https://www.r-graph-gallery.com/colors.html. Or, you can run the colors() function (without any arguments), and youll get a (huge) list of the color options. # List names of base R color choices colors() ## [1] &quot;white&quot; &quot;aliceblue&quot; &quot;antiquewhite&quot; &quot;antiquewhite1&quot; ## [5] &quot;antiquewhite2&quot; &quot;antiquewhite3&quot; &quot;antiquewhite4&quot; &quot;aquamarine&quot; ## [9] &quot;aquamarine1&quot; &quot;aquamarine2&quot; &quot;aquamarine3&quot; &quot;aquamarine4&quot; ## [13] &quot;azure&quot; &quot;azure1&quot; &quot;azure2&quot; &quot;azure3&quot; ## [17] &quot;azure4&quot; &quot;beige&quot; &quot;bisque&quot; &quot;bisque1&quot; ## [21] &quot;bisque2&quot; &quot;bisque3&quot; &quot;bisque4&quot; &quot;black&quot; ## [25] &quot;blanchedalmond&quot; &quot;blue&quot; &quot;blue1&quot; &quot;blue2&quot; ## [29] &quot;blue3&quot; &quot;blue4&quot; &quot;blueviolet&quot; &quot;brown&quot; ## [33] &quot;brown1&quot; &quot;brown2&quot; &quot;brown3&quot; &quot;brown4&quot; ## [37] &quot;burlywood&quot; &quot;burlywood1&quot; &quot;burlywood2&quot; &quot;burlywood3&quot; ## [41] &quot;burlywood4&quot; &quot;cadetblue&quot; &quot;cadetblue1&quot; &quot;cadetblue2&quot; ## [45] &quot;cadetblue3&quot; &quot;cadetblue4&quot; &quot;chartreuse&quot; &quot;chartreuse1&quot; ## [49] &quot;chartreuse2&quot; &quot;chartreuse3&quot; &quot;chartreuse4&quot; &quot;chocolate&quot; ## [53] &quot;chocolate1&quot; &quot;chocolate2&quot; &quot;chocolate3&quot; &quot;chocolate4&quot; ## [57] &quot;coral&quot; &quot;coral1&quot; &quot;coral2&quot; &quot;coral3&quot; ## [61] &quot;coral4&quot; &quot;cornflowerblue&quot; &quot;cornsilk&quot; &quot;cornsilk1&quot; ## [65] &quot;cornsilk2&quot; &quot;cornsilk3&quot; &quot;cornsilk4&quot; &quot;cyan&quot; ## [69] &quot;cyan1&quot; &quot;cyan2&quot; &quot;cyan3&quot; &quot;cyan4&quot; ## [73] &quot;darkblue&quot; &quot;darkcyan&quot; &quot;darkgoldenrod&quot; &quot;darkgoldenrod1&quot; ## [77] &quot;darkgoldenrod2&quot; &quot;darkgoldenrod3&quot; &quot;darkgoldenrod4&quot; &quot;darkgray&quot; ## [81] &quot;darkgreen&quot; &quot;darkgrey&quot; &quot;darkkhaki&quot; &quot;darkmagenta&quot; ## [85] &quot;darkolivegreen&quot; &quot;darkolivegreen1&quot; &quot;darkolivegreen2&quot; &quot;darkolivegreen3&quot; ## [89] &quot;darkolivegreen4&quot; &quot;darkorange&quot; &quot;darkorange1&quot; &quot;darkorange2&quot; ## [93] &quot;darkorange3&quot; &quot;darkorange4&quot; &quot;darkorchid&quot; &quot;darkorchid1&quot; ## [97] &quot;darkorchid2&quot; &quot;darkorchid3&quot; &quot;darkorchid4&quot; &quot;darkred&quot; ## [101] &quot;darksalmon&quot; &quot;darkseagreen&quot; &quot;darkseagreen1&quot; &quot;darkseagreen2&quot; ## [105] &quot;darkseagreen3&quot; &quot;darkseagreen4&quot; &quot;darkslateblue&quot; &quot;darkslategray&quot; ## [109] &quot;darkslategray1&quot; &quot;darkslategray2&quot; &quot;darkslategray3&quot; &quot;darkslategray4&quot; ## [113] &quot;darkslategrey&quot; &quot;darkturquoise&quot; &quot;darkviolet&quot; &quot;deeppink&quot; ## [117] &quot;deeppink1&quot; &quot;deeppink2&quot; &quot;deeppink3&quot; &quot;deeppink4&quot; ## [121] &quot;deepskyblue&quot; &quot;deepskyblue1&quot; &quot;deepskyblue2&quot; &quot;deepskyblue3&quot; ## [125] &quot;deepskyblue4&quot; &quot;dimgray&quot; &quot;dimgrey&quot; &quot;dodgerblue&quot; ## [129] &quot;dodgerblue1&quot; &quot;dodgerblue2&quot; &quot;dodgerblue3&quot; &quot;dodgerblue4&quot; ## [133] &quot;firebrick&quot; &quot;firebrick1&quot; &quot;firebrick2&quot; &quot;firebrick3&quot; ## [137] &quot;firebrick4&quot; &quot;floralwhite&quot; &quot;forestgreen&quot; &quot;gainsboro&quot; ## [141] &quot;ghostwhite&quot; &quot;gold&quot; &quot;gold1&quot; &quot;gold2&quot; ## [145] &quot;gold3&quot; &quot;gold4&quot; &quot;goldenrod&quot; &quot;goldenrod1&quot; ## [149] &quot;goldenrod2&quot; &quot;goldenrod3&quot; &quot;goldenrod4&quot; &quot;gray&quot; ## [153] &quot;gray0&quot; &quot;gray1&quot; &quot;gray2&quot; &quot;gray3&quot; ## [157] &quot;gray4&quot; &quot;gray5&quot; &quot;gray6&quot; &quot;gray7&quot; ## [161] &quot;gray8&quot; &quot;gray9&quot; &quot;gray10&quot; &quot;gray11&quot; ## [165] &quot;gray12&quot; &quot;gray13&quot; &quot;gray14&quot; &quot;gray15&quot; ## [169] &quot;gray16&quot; &quot;gray17&quot; &quot;gray18&quot; &quot;gray19&quot; ## [173] &quot;gray20&quot; &quot;gray21&quot; &quot;gray22&quot; &quot;gray23&quot; ## [177] &quot;gray24&quot; &quot;gray25&quot; &quot;gray26&quot; &quot;gray27&quot; ## [181] &quot;gray28&quot; &quot;gray29&quot; &quot;gray30&quot; &quot;gray31&quot; ## [185] &quot;gray32&quot; &quot;gray33&quot; &quot;gray34&quot; &quot;gray35&quot; ## [189] &quot;gray36&quot; &quot;gray37&quot; &quot;gray38&quot; &quot;gray39&quot; ## [193] &quot;gray40&quot; &quot;gray41&quot; &quot;gray42&quot; &quot;gray43&quot; ## [197] &quot;gray44&quot; &quot;gray45&quot; &quot;gray46&quot; &quot;gray47&quot; ## [201] &quot;gray48&quot; &quot;gray49&quot; &quot;gray50&quot; &quot;gray51&quot; ## [205] &quot;gray52&quot; &quot;gray53&quot; &quot;gray54&quot; &quot;gray55&quot; ## [209] &quot;gray56&quot; &quot;gray57&quot; &quot;gray58&quot; &quot;gray59&quot; ## [213] &quot;gray60&quot; &quot;gray61&quot; &quot;gray62&quot; &quot;gray63&quot; ## [217] &quot;gray64&quot; &quot;gray65&quot; &quot;gray66&quot; &quot;gray67&quot; ## [221] &quot;gray68&quot; &quot;gray69&quot; &quot;gray70&quot; &quot;gray71&quot; ## [225] &quot;gray72&quot; &quot;gray73&quot; &quot;gray74&quot; &quot;gray75&quot; ## [229] &quot;gray76&quot; &quot;gray77&quot; &quot;gray78&quot; &quot;gray79&quot; ## [233] &quot;gray80&quot; &quot;gray81&quot; &quot;gray82&quot; &quot;gray83&quot; ## [237] &quot;gray84&quot; &quot;gray85&quot; &quot;gray86&quot; &quot;gray87&quot; ## [241] &quot;gray88&quot; &quot;gray89&quot; &quot;gray90&quot; &quot;gray91&quot; ## [245] &quot;gray92&quot; &quot;gray93&quot; &quot;gray94&quot; &quot;gray95&quot; ## [249] &quot;gray96&quot; &quot;gray97&quot; &quot;gray98&quot; &quot;gray99&quot; ## [253] &quot;gray100&quot; &quot;green&quot; &quot;green1&quot; &quot;green2&quot; ## [257] &quot;green3&quot; &quot;green4&quot; &quot;greenyellow&quot; &quot;grey&quot; ## [261] &quot;grey0&quot; &quot;grey1&quot; &quot;grey2&quot; &quot;grey3&quot; ## [265] &quot;grey4&quot; &quot;grey5&quot; &quot;grey6&quot; &quot;grey7&quot; ## [269] &quot;grey8&quot; &quot;grey9&quot; &quot;grey10&quot; &quot;grey11&quot; ## [273] &quot;grey12&quot; &quot;grey13&quot; &quot;grey14&quot; &quot;grey15&quot; ## [277] &quot;grey16&quot; &quot;grey17&quot; &quot;grey18&quot; &quot;grey19&quot; ## [281] &quot;grey20&quot; &quot;grey21&quot; &quot;grey22&quot; &quot;grey23&quot; ## [285] &quot;grey24&quot; &quot;grey25&quot; &quot;grey26&quot; &quot;grey27&quot; ## [289] &quot;grey28&quot; &quot;grey29&quot; &quot;grey30&quot; &quot;grey31&quot; ## [293] &quot;grey32&quot; &quot;grey33&quot; &quot;grey34&quot; &quot;grey35&quot; ## [297] &quot;grey36&quot; &quot;grey37&quot; &quot;grey38&quot; &quot;grey39&quot; ## [301] &quot;grey40&quot; &quot;grey41&quot; &quot;grey42&quot; &quot;grey43&quot; ## [305] &quot;grey44&quot; &quot;grey45&quot; &quot;grey46&quot; &quot;grey47&quot; ## [309] &quot;grey48&quot; &quot;grey49&quot; &quot;grey50&quot; &quot;grey51&quot; ## [313] &quot;grey52&quot; &quot;grey53&quot; &quot;grey54&quot; &quot;grey55&quot; ## [317] &quot;grey56&quot; &quot;grey57&quot; &quot;grey58&quot; &quot;grey59&quot; ## [321] &quot;grey60&quot; &quot;grey61&quot; &quot;grey62&quot; &quot;grey63&quot; ## [325] &quot;grey64&quot; &quot;grey65&quot; &quot;grey66&quot; &quot;grey67&quot; ## [329] &quot;grey68&quot; &quot;grey69&quot; &quot;grey70&quot; &quot;grey71&quot; ## [333] &quot;grey72&quot; &quot;grey73&quot; &quot;grey74&quot; &quot;grey75&quot; ## [337] &quot;grey76&quot; &quot;grey77&quot; &quot;grey78&quot; &quot;grey79&quot; ## [341] &quot;grey80&quot; &quot;grey81&quot; &quot;grey82&quot; &quot;grey83&quot; ## [345] &quot;grey84&quot; &quot;grey85&quot; &quot;grey86&quot; &quot;grey87&quot; ## [349] &quot;grey88&quot; &quot;grey89&quot; &quot;grey90&quot; &quot;grey91&quot; ## [353] &quot;grey92&quot; &quot;grey93&quot; &quot;grey94&quot; &quot;grey95&quot; ## [357] &quot;grey96&quot; &quot;grey97&quot; &quot;grey98&quot; &quot;grey99&quot; ## [361] &quot;grey100&quot; &quot;honeydew&quot; &quot;honeydew1&quot; &quot;honeydew2&quot; ## [365] &quot;honeydew3&quot; &quot;honeydew4&quot; &quot;hotpink&quot; &quot;hotpink1&quot; ## [369] &quot;hotpink2&quot; &quot;hotpink3&quot; &quot;hotpink4&quot; &quot;indianred&quot; ## [373] &quot;indianred1&quot; &quot;indianred2&quot; &quot;indianred3&quot; &quot;indianred4&quot; ## [377] &quot;ivory&quot; &quot;ivory1&quot; &quot;ivory2&quot; &quot;ivory3&quot; ## [381] &quot;ivory4&quot; &quot;khaki&quot; &quot;khaki1&quot; &quot;khaki2&quot; ## [385] &quot;khaki3&quot; &quot;khaki4&quot; &quot;lavender&quot; &quot;lavenderblush&quot; ## [389] &quot;lavenderblush1&quot; &quot;lavenderblush2&quot; &quot;lavenderblush3&quot; &quot;lavenderblush4&quot; ## [393] &quot;lawngreen&quot; &quot;lemonchiffon&quot; &quot;lemonchiffon1&quot; &quot;lemonchiffon2&quot; ## [397] &quot;lemonchiffon3&quot; &quot;lemonchiffon4&quot; &quot;lightblue&quot; &quot;lightblue1&quot; ## [401] &quot;lightblue2&quot; &quot;lightblue3&quot; &quot;lightblue4&quot; &quot;lightcoral&quot; ## [405] &quot;lightcyan&quot; &quot;lightcyan1&quot; &quot;lightcyan2&quot; &quot;lightcyan3&quot; ## [409] &quot;lightcyan4&quot; &quot;lightgoldenrod&quot; &quot;lightgoldenrod1&quot; &quot;lightgoldenrod2&quot; ## [413] &quot;lightgoldenrod3&quot; &quot;lightgoldenrod4&quot; &quot;lightgoldenrodyellow&quot; &quot;lightgray&quot; ## [417] &quot;lightgreen&quot; &quot;lightgrey&quot; &quot;lightpink&quot; &quot;lightpink1&quot; ## [421] &quot;lightpink2&quot; &quot;lightpink3&quot; &quot;lightpink4&quot; &quot;lightsalmon&quot; ## [425] &quot;lightsalmon1&quot; &quot;lightsalmon2&quot; &quot;lightsalmon3&quot; &quot;lightsalmon4&quot; ## [429] &quot;lightseagreen&quot; &quot;lightskyblue&quot; &quot;lightskyblue1&quot; &quot;lightskyblue2&quot; ## [433] &quot;lightskyblue3&quot; &quot;lightskyblue4&quot; &quot;lightslateblue&quot; &quot;lightslategray&quot; ## [437] &quot;lightslategrey&quot; &quot;lightsteelblue&quot; &quot;lightsteelblue1&quot; &quot;lightsteelblue2&quot; ## [441] &quot;lightsteelblue3&quot; &quot;lightsteelblue4&quot; &quot;lightyellow&quot; &quot;lightyellow1&quot; ## [445] &quot;lightyellow2&quot; &quot;lightyellow3&quot; &quot;lightyellow4&quot; &quot;limegreen&quot; ## [449] &quot;linen&quot; &quot;magenta&quot; &quot;magenta1&quot; &quot;magenta2&quot; ## [453] &quot;magenta3&quot; &quot;magenta4&quot; &quot;maroon&quot; &quot;maroon1&quot; ## [457] &quot;maroon2&quot; &quot;maroon3&quot; &quot;maroon4&quot; &quot;mediumaquamarine&quot; ## [461] &quot;mediumblue&quot; &quot;mediumorchid&quot; &quot;mediumorchid1&quot; &quot;mediumorchid2&quot; ## [465] &quot;mediumorchid3&quot; &quot;mediumorchid4&quot; &quot;mediumpurple&quot; &quot;mediumpurple1&quot; ## [469] &quot;mediumpurple2&quot; &quot;mediumpurple3&quot; &quot;mediumpurple4&quot; &quot;mediumseagreen&quot; ## [473] &quot;mediumslateblue&quot; &quot;mediumspringgreen&quot; &quot;mediumturquoise&quot; &quot;mediumvioletred&quot; ## [477] &quot;midnightblue&quot; &quot;mintcream&quot; &quot;mistyrose&quot; &quot;mistyrose1&quot; ## [481] &quot;mistyrose2&quot; &quot;mistyrose3&quot; &quot;mistyrose4&quot; &quot;moccasin&quot; ## [485] &quot;navajowhite&quot; &quot;navajowhite1&quot; &quot;navajowhite2&quot; &quot;navajowhite3&quot; ## [489] &quot;navajowhite4&quot; &quot;navy&quot; &quot;navyblue&quot; &quot;oldlace&quot; ## [493] &quot;olivedrab&quot; &quot;olivedrab1&quot; &quot;olivedrab2&quot; &quot;olivedrab3&quot; ## [497] &quot;olivedrab4&quot; &quot;orange&quot; &quot;orange1&quot; &quot;orange2&quot; ## [501] &quot;orange3&quot; &quot;orange4&quot; &quot;orangered&quot; &quot;orangered1&quot; ## [505] &quot;orangered2&quot; &quot;orangered3&quot; &quot;orangered4&quot; &quot;orchid&quot; ## [509] &quot;orchid1&quot; &quot;orchid2&quot; &quot;orchid3&quot; &quot;orchid4&quot; ## [513] &quot;palegoldenrod&quot; &quot;palegreen&quot; &quot;palegreen1&quot; &quot;palegreen2&quot; ## [517] &quot;palegreen3&quot; &quot;palegreen4&quot; &quot;paleturquoise&quot; &quot;paleturquoise1&quot; ## [521] &quot;paleturquoise2&quot; &quot;paleturquoise3&quot; &quot;paleturquoise4&quot; &quot;palevioletred&quot; ## [525] &quot;palevioletred1&quot; &quot;palevioletred2&quot; &quot;palevioletred3&quot; &quot;palevioletred4&quot; ## [529] &quot;papayawhip&quot; &quot;peachpuff&quot; &quot;peachpuff1&quot; &quot;peachpuff2&quot; ## [533] &quot;peachpuff3&quot; &quot;peachpuff4&quot; &quot;peru&quot; &quot;pink&quot; ## [537] &quot;pink1&quot; &quot;pink2&quot; &quot;pink3&quot; &quot;pink4&quot; ## [541] &quot;plum&quot; &quot;plum1&quot; &quot;plum2&quot; &quot;plum3&quot; ## [545] &quot;plum4&quot; &quot;powderblue&quot; &quot;purple&quot; &quot;purple1&quot; ## [549] &quot;purple2&quot; &quot;purple3&quot; &quot;purple4&quot; &quot;red&quot; ## [553] &quot;red1&quot; &quot;red2&quot; &quot;red3&quot; &quot;red4&quot; ## [557] &quot;rosybrown&quot; &quot;rosybrown1&quot; &quot;rosybrown2&quot; &quot;rosybrown3&quot; ## [561] &quot;rosybrown4&quot; &quot;royalblue&quot; &quot;royalblue1&quot; &quot;royalblue2&quot; ## [565] &quot;royalblue3&quot; &quot;royalblue4&quot; &quot;saddlebrown&quot; &quot;salmon&quot; ## [569] &quot;salmon1&quot; &quot;salmon2&quot; &quot;salmon3&quot; &quot;salmon4&quot; ## [573] &quot;sandybrown&quot; &quot;seagreen&quot; &quot;seagreen1&quot; &quot;seagreen2&quot; ## [577] &quot;seagreen3&quot; &quot;seagreen4&quot; &quot;seashell&quot; &quot;seashell1&quot; ## [581] &quot;seashell2&quot; &quot;seashell3&quot; &quot;seashell4&quot; &quot;sienna&quot; ## [585] &quot;sienna1&quot; &quot;sienna2&quot; &quot;sienna3&quot; &quot;sienna4&quot; ## [589] &quot;skyblue&quot; &quot;skyblue1&quot; &quot;skyblue2&quot; &quot;skyblue3&quot; ## [593] &quot;skyblue4&quot; &quot;slateblue&quot; &quot;slateblue1&quot; &quot;slateblue2&quot; ## [597] &quot;slateblue3&quot; &quot;slateblue4&quot; &quot;slategray&quot; &quot;slategray1&quot; ## [601] &quot;slategray2&quot; &quot;slategray3&quot; &quot;slategray4&quot; &quot;slategrey&quot; ## [605] &quot;snow&quot; &quot;snow1&quot; &quot;snow2&quot; &quot;snow3&quot; ## [609] &quot;snow4&quot; &quot;springgreen&quot; &quot;springgreen1&quot; &quot;springgreen2&quot; ## [613] &quot;springgreen3&quot; &quot;springgreen4&quot; &quot;steelblue&quot; &quot;steelblue1&quot; ## [617] &quot;steelblue2&quot; &quot;steelblue3&quot; &quot;steelblue4&quot; &quot;tan&quot; ## [621] &quot;tan1&quot; &quot;tan2&quot; &quot;tan3&quot; &quot;tan4&quot; ## [625] &quot;thistle&quot; &quot;thistle1&quot; &quot;thistle2&quot; &quot;thistle3&quot; ## [629] &quot;thistle4&quot; &quot;tomato&quot; &quot;tomato1&quot; &quot;tomato2&quot; ## [633] &quot;tomato3&quot; &quot;tomato4&quot; &quot;turquoise&quot; &quot;turquoise1&quot; ## [637] &quot;turquoise2&quot; &quot;turquoise3&quot; &quot;turquoise4&quot; &quot;violet&quot; ## [641] &quot;violetred&quot; &quot;violetred1&quot; &quot;violetred2&quot; &quot;violetred3&quot; ## [645] &quot;violetred4&quot; &quot;wheat&quot; &quot;wheat1&quot; &quot;wheat2&quot; ## [649] &quot;wheat3&quot; &quot;wheat4&quot; &quot;whitesmoke&quot; &quot;yellow&quot; ## [653] &quot;yellow1&quot; &quot;yellow2&quot; &quot;yellow3&quot; &quot;yellow4&quot; ## [657] &quot;yellowgreen&quot; 21.3 Describe Interval &amp; Ratio (Continuous) Variables We can describe variables with interval or ratio measurement scales (i.e., continuous variables) by computing measures of central tendency (e.g., mean, median) and dispersion (e.g., standard deviation, range); however, its often good practice to begin by creating data visualizations (e.g., histograms, box plots) that will enable us to understand the nature of each variables distribution. 21.3.1 Create Data Visualizations By visualizing the shape of a continuous variables distribution (e.g., normal distribution, positive skew, negative skew), we can make a more informed decision regarding how to select, interpret, and report measures of central tendency and dispersion. In this section, well focus on creating histograms and box plots. 21.3.1.1 Create Histograms A histogram visually approximates the distribution of a set of numerical scores. The scores are grouped into ranges (which by default are often equally sized), and the boundaries of these ranges are referred to as breaks or break points. The bars in a histogram fill these ranges, and their heights represent the frequency (i.e., count) of sources within each range. Lets begin with the Age variable. To create a histogram, we can use the hist function from base R. To get things started, lets enter a single argument: the name of the data frame object (demo), followed by the $ operator and the name of the variable we wish to visualize (Age). # Create a histogram hist(demo$Age) This histogram will do just fine for our purposes. Note that the histogram indicates that the scores from the Age variable appear to be roughly normally distributed. With smaller sample sizes (e.g., fewer than 30 observations or cases), were less likely to see a clean, normal distribution of scores, and this relates to the central limit theorem; though, an explanation of this theorem is beyond the scope of this tutorial. Nevertheless, the take-home message is that histograms provide rough approximations of the shapes of distributions, and a normal distribution is less likely when their are fewer observations (i.e., a smaller sample) and thus fewer scores on a variable. For your own internal data-exploration purposes, it is often fine to create a simple histogram like the one we created above, meaning that you would not need to worry about the aesthetics (e.g., size, color) of the histogram. If you want, you can export this plot as a PDF or PNG image file, or you can copy it and paste it in another document. To do so, just click on the Export button in the Plots window, which should appear in the lower right of your RStudio interface. As optional next steps, you can play around with arguments to adjust the y-axis limits (ylim), x-axis label (xlab), y-axis label (ylab), main title (main), and the bar color (col). [If youd like to explore additional colors, check out this website: https://www.r-graph-gallery.com/colors.html. Or, you can run the colors() function (without any arguments), and youll get a (huge) list of the color options.] A more in-depth description of these plot arguments is provided in the section above called Create Bar Charts. # Create a histogram and add style hist(demo$Age, ylim=c(0, 15), # y-axis limits xlab=&quot;Employee Age&quot;, # x-axis label ylab=&quot;Count&quot;, # y-axis label main=NULL, # main title col=&quot;dodgerblue&quot;) # bar color We can also specify a vector of the break points between the bars using the c function from base R. Just be sure that the lowest value in your vector is equal to or less than the minimum value for the variable and the the highest value is equal to or greater than the maximum value for the variable. To do so, we can add the breaks argument. # Create a histogram and add style hist(demo$Age, ylim=c(0, 25), # y-axis limits xlab=&quot;Employee Age&quot;, # x-axis label ylab=&quot;Count&quot;, # y-axis label main=NULL, # remove main title col=&quot;dodgerblue&quot;, # bar color breaks=c(20, 25, 30, 35)) # set break points between bars 21.3.1.2 Create Box Plots We could use a histogram to visualize the Performance variable, but lets use this opportunity to create a box plot instead. Like a histogram, a box plot (sometimes called a box and whiskers plot) also reveals information about the shape of a distribution, including the median, 25th percentile (i.e., lower quartile), 75th percentile (i.e., upper quartile), and the variation outside the 25th and 75th percentiles. Well use the boxplot function from base R. To kick things off, lets enter a single argument: the name of the data frame object (demo), followed by the $ operator and the name of the variable we wish to visualize (Performance). # Create a box plot boxplot(demo$Performance) The thick horizontal line in the middle of the box is the median score, the lower edge of the box represents the lower quartile (i.e., 25th percentile, median of lower half of the distribution), and the upper edge of the box represents the upper quartile (i.e., 75th percentile, median of the upper half of the distribution). The height of the box is the interquartile range. By default, the boxplot function sets the upper whisker (i.e., the horizontal line at the top of the upper dashed line) as the smaller of two values: the maximum value or 1.5 times the interquartile range. Further, the function sets the lower whisker (i.e., the horizontal line at the bottom of the lower dashed line) as the larger of two values: the minimum value or 1.5 times the interquartile range. In the box plot for Performance, we can see that the distribution of scores appears to be slightly negatively skewed, as the upper quartile is smaller than the lower quartile (i.e., the median is closer to the top of the box) and the upper whisker is shorter than the lower whisker. If there had been any outlier scores, these would appear beyond the upper and lower limits of the whiskers. If you plan to create a box plot for your own data-exploration purposes only, it is often fine to create a simple box plot like the one we created above, which means you would not need to proceed forward with subsequent steps in which I show how to refine the aesthetics of the box plot. If you want, you can export this plot as a PDF or PNG image file, or you can copy it and paste it in another document. To do so, just click on the Export button in the Plots window, which should appear in the lower right of your RStudio interface. As optional next steps, you can play around with arguments to adjust the y-axis label (ylab) and the box color (col). [If youd like to explore additional colors, check out this website: https://www.r-graph-gallery.com/colors.html. Or, you can run the colors() function (without any arguments), and youll get a (huge) list of the color options.] # Create a box plot and add style boxplot(demo$Performance, ylab=&quot;Employee Job Performance&quot;, # y-axis label col=&quot;orange&quot;) # bar color 21.3.2 Compute Measures of Central Tendency &amp; Dispersion Now that weve visualized our interval and ratio measurement scale variables, were ready to compute some measures of central tendency and dispersion. In R the process is quite straightforward, as the function names are fairly intuitive: mean (mean), var (variance), sd (standard deviation), median (median), min (minimum), max (maximum), range (range), and IQR (interquartile range). Within each functions parentheses, you will enter the same arguments. Specifically, you should include the name of the data frame (demo), followed by the $ operator and the name of the variable ofese measures of central tendency even if there are missing data for the varia interest (Age). Keep the na.rm=TRUE argument as is if you would like to calculate the variable of interest. Lets start with some measures of central tendency for the Age variable, specifically the mean (mean) and median (median). # Mean of Age mean(demo$Age, na.rm=TRUE) ## [1] 28 # Median of Age median(demo$Age, na.rm=TRUE) ## [1] 28 As you can, see both the median and the mode happen to be 28, which indicates that center of the Age distribution is about 28 years. Should we have a skewed distribution (positive or negative), the median is often a better indicator of central tendency given that it is less susceptible to influential cases (e.g., outliers). A class example of a skewed distribution in organizations involves pay variables, especially when executive pay is included. In U.S. organizations, executive pay often is far greater than average workers pay, which often leads us to report the median pay as an indicator of central tendency. Lets move on to some measures of dispersion, specifically the variance (var) and standard deviation (sd). # Variance of Age var(demo$Age, na.rm=TRUE) ## [1] 7.103448 # Standard deviation (SD) of Age sd(demo$Age, na.rm=TRUE) ## [1] 2.665229 The variance is a nonstandardized indicator of dispersion or variation, so we typically interpret the square root of the variance, which is called the standard deviation. Given that we found a mean age of 28 years for this sample of employees, the standard deviation of approximately 2.67 years indicates that approximately 68% of employees ages fall within 2.67 years (i.e., 1 SD) of 28 years (i.e., between 25.33 and 30.67 years), and 95% of employees ages fall within 5.34 years (i.e., 2 SD) of 28 years (i.e., between 22.66 and 33.34 years). As we saw in the histogram for Age, the variable has a roughly normal distribution. Lets compute the minimum and maximum score for Age using the min and max functions, respectively. # Minimum of Age min(demo$Age, na.rm=TRUE) ## [1] 22 # Maximum of Age max(demo$Age, na.rm=TRUE) ## [1] 34 The minimum age is 22 years for this sample, and the maximum age is 34 years. Next lets compute the range, which will give us the minimum and maximum scores using a single function. # Range of Age range(demo$Age, na.rm=TRUE) ## [1] 22 34 As you can see, the range functions provides both the minimum and maximum scores. Next, lets compute the interquartile range (IQR), which is the distance between the lower and upper quartiles (i.e., between the 25th and 75th percentile). As noted above in the section called Create Box Plots, the lower and upper quartiles correspond to the outer edges of the box, whereas the median (50th percentile) corresponds to the line within the box. # Interquartile range (IQR) of Age IQR(demo$Age, na.rm=TRUE) ## [1] 3 The IQR is 3 years, which indicates that middle 50% of ages spans 3 years. As a follow-up, lets compute the lower and upper quartiles (i.e., between the 25th and 75th percentiles) by using the quantile function from base R. As the first argument, type the name of the data frame (demo), followed by the $ operator and the name of the variable of interest (Age). As the second argument, type .25 if you would like to request the 25th percentile (lower quartile) and .75 if you would like to request the 75th percentile (upper quartile). Lets do both. # Request specific quartiles/percentiles quantile(demo$Age, .25) # lower quartile / 25th percentile ## 25% ## 27 quantile(demo$Age, .75) # upper quartile / 75th percentile ## 75% ## 30 Corroborating what we found with the IQR, the difference between the upper and lower quartiles is 3 years (30 - 27 = 3). The IQR and lower and upper quartiles are typically reported along with the median (as evidenced by the box plot we created above), so lets report them together. If you recall, the median age was 28 years for this sample, and the IQR spans 3 years from 27 years to 30 years. These measures indicate that the middle 50% of ages for this sample are between 27 and 30 years, and that the middle-most age (i.e., 50th percentile) is 28 years. Alternatively, if we wish to automatically compute the 0th, 25th, 50th, 75th, and 100th percentile all at once, we can simply type the name of the quantile function and then enter the name of the data frame object (df) followed by the $ operator and the name of the variable (Age). # Request 0, 25, 50, 75, and 100 percentiles quantile(demo$Age) ## 0% 25% 50% 75% 100% ## 22 27 28 30 34 Finally, one way to compute the minimum, lower quartile (1st quartile), median, mean, upper quartile (3rd quartile), and maximum all at once is to use the summary function from base R with the name of the data frame object (demo) followed by the $ operator and the name of the variable (Age) as the sole parenthetical argument. # Minimum, lower quartile (1st quartile), median, mean, upper quartile (3rd quartile), and maximum summary(demo$Age) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 22 27 28 28 30 34 21.4 Summary In this chapter, we focused on descriptive statistics. First, we began by learning about four different measurements scales (i.e., nominal, ordinal, interval, ratio) and how identifying the measurement scale of a variable is an important first step in determining an appropriate descriptive statistic or data-visualization display type. Second, we learned how to compute counts (i.e., frequencies) for nominal and ordinal variables using the table function from base R. Further, you learned how to convert a variable to an ordered factor using the factor function from base R. Finally, you learned how to visualize counts data using the barplot function from base R. Finally, we learned how to visualize the distribution of a variable with an interval or ratio measurement scale using histograms (hist function from base R) and box plots (boxplot function from base R). In addition, we learned how to compute measures of central tendency and dispersion base R functions like mean (mean), var (variance), sd (standard deviation), median (median), min (minimum), max (maximum), range (range), and IQR (interquartile range). "]]
